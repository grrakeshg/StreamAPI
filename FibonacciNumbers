import java.util.stream.Stream;
import java.util.List;
import java.util.stream.Collectors;

public class FibonacciStream {
    public static void main(String[] args) {
        // Limit the Fibonacci series to 10 elements
        List<Long> fibonacciSeries = Stream.iterate(new long[]{0, 1}, fib -> new long[]{fib[1], fib[0] + fib[1]})
                                           .limit(10)
                                           .map(fib -> fib[0])
                                           .collect(Collectors.toList());

        // Print the Fibonacci series
        fibonacciSeries.forEach(System.out::println);
    }
}
/*
Stream.iterate: This method creates an infinite sequential ordered stream where each element is generated by applying a function to the previous element.
In this case, it starts with the array {0, 1} and then uses a lambda function fib -> new long[]{fib[1], fib[0] + fib[1]} to generate the next pair.

limit(10): This limits the stream to the first 10 elements. You can change this number to generate more or fewer elements.

map(fib -> fib[0]): This extracts the first element of each pair, which represents the Fibonacci number in the series.

collect(Collectors.toList()): This collects the resulting Fibonacci numbers into a List.

forEach(System.out::println): This prints each element of the Fibonacci series.
*/
